<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wowking</title>
    <description>I don&#39;t really know where I&#39;m going, but I hope I go far.</description>
    <link>https://wowkingah.github.io/</link>
    <atom:link href="https://wowkingah.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 24 Apr 2017 12:05:30 +0800</pubDate>
    <lastBuildDate>Mon, 24 Apr 2017 12:05:30 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Markdown常用语法</title>
        <description>&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;什么是 Markdown&lt;/h3&gt;
&lt;p&gt;Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;标题&lt;/h3&gt;
&lt;p&gt;一级标题：&lt;code class=&quot;highlighter-rouge&quot;&gt;# Header 1&lt;/code&gt;&lt;br /&gt;
二级标题：&lt;code class=&quot;highlighter-rouge&quot;&gt;## Header 2&lt;/code&gt;         &lt;br /&gt;
三级标题：&lt;code class=&quot;highlighter-rouge&quot;&gt;### Header 3&lt;/code&gt;         &lt;br /&gt;
四级标题：&lt;code class=&quot;highlighter-rouge&quot;&gt;#### Header 4&lt;/code&gt;         &lt;br /&gt;
五级标题：&lt;code class=&quot;highlighter-rouge&quot;&gt;##### Header 5&lt;/code&gt;          &lt;br /&gt;
六级标题：&lt;code class=&quot;highlighter-rouge&quot;&gt;###### Header 6&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/markdown_syntax/header.jpg&quot; alt=&quot;标题&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;字体&lt;/h3&gt;
&lt;p&gt;斜体：&lt;code class=&quot;highlighter-rouge&quot;&gt;*斜体*&lt;/code&gt;&lt;br /&gt;
粗体：&lt;code class=&quot;highlighter-rouge&quot;&gt;**粗体**&lt;/code&gt;&lt;br /&gt;
粗斜体：&lt;code class=&quot;highlighter-rouge&quot;&gt;***粗斜体***&lt;/code&gt;&lt;br /&gt;
删除线：&lt;code class=&quot;highlighter-rouge&quot;&gt;~~删除线~~&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/markdown_syntax/font.jpg&quot; alt=&quot;字体&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;目录&lt;/h3&gt;
&lt;p&gt;在段落中填写 &lt;code class=&quot;highlighter-rouge&quot;&gt;[TOC]&lt;/code&gt; 以显示全文内容的目录结构。
&lt;img src=&quot;/images/posts/markdown_syntax/catalogue.jpg&quot; alt=&quot;目录&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;段与行&lt;/h3&gt;
&lt;p&gt;段落：&lt;code class=&quot;highlighter-rouge&quot;&gt;段落之间空一行&lt;/code&gt;&lt;br /&gt;
换行：&lt;code class=&quot;highlighter-rouge&quot;&gt;一行结束时输入两个空格&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;列表项&lt;/h3&gt;
&lt;p&gt;列表项1：&lt;code class=&quot;highlighter-rouge&quot;&gt;* 列表项1&lt;/code&gt;&lt;br /&gt;
列表项2：&lt;code class=&quot;highlighter-rouge&quot;&gt;* 列表项2&lt;/code&gt;&lt;br /&gt;
列表项3：&lt;code class=&quot;highlighter-rouge&quot;&gt;+ 列表项3&lt;/code&gt;&lt;br /&gt;
列表项4：&lt;code class=&quot;highlighter-rouge&quot;&gt;+ 列表项4&lt;/code&gt;&lt;br /&gt;
列表项5：&lt;code class=&quot;highlighter-rouge&quot;&gt;+ 列表项5&lt;/code&gt;&lt;br /&gt;
列表项6：&lt;code class=&quot;highlighter-rouge&quot;&gt;+ 列表项6&lt;/code&gt;&lt;br /&gt;
列表项7：&lt;code class=&quot;highlighter-rouge&quot;&gt;1. 列表项7&lt;/code&gt;&lt;br /&gt;
列表项8：&lt;code class=&quot;highlighter-rouge&quot;&gt;2. 列表项8&lt;/code&gt;&lt;br /&gt;
列表项9：&lt;code class=&quot;highlighter-rouge&quot;&gt;- [ ] 列表项9&lt;/code&gt;&lt;br /&gt;
列表项10：&lt;code class=&quot;highlighter-rouge&quot;&gt;- [x] 列表项10&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/markdown_syntax/list.jpg&quot; alt=&quot;列表项&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;引用&lt;/h3&gt;
&lt;p&gt;引用：&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; 引用内容，可结合列表项一起使用&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/markdown_syntax/reference.jpg&quot; alt=&quot;引用&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;表格&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 项目 | 价格 | 数量 |
| -------- | -----: | :----: |
| 计算机 | 8000 | 10 |
| 手机 | 6000 | 5 |
| 电视 | 3000 | 1 | ![表格](/images/posts/markdown_syntax/table.jpg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;链接与图片&lt;/h3&gt;
&lt;p&gt;链接：&lt;code class=&quot;highlighter-rouge&quot;&gt;[Title](URL)&lt;/code&gt;&lt;br /&gt;
图片：&lt;code class=&quot;highlighter-rouge&quot;&gt;![](/images/image.jpg)&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/markdown_syntax/link.jpg&quot; alt=&quot;链接&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;代码高亮&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```python
print &#39;hello world~&#39;
 ``` ![代码](/images/posts/markdown_syntax/code.jpg)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;水平线&lt;/h3&gt;
&lt;p&gt;水平线：&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;br /&gt;
&lt;img src=&quot;/images/posts/markdown_syntax/horizontal_rules.jpg&quot; alt=&quot;水平线&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-10&quot;&gt;注脚&lt;/h3&gt;
&lt;p&gt;使用 [^keyword] 表示注脚。
这是一个&lt;em&gt;注脚&lt;/em&gt;&lt;sup id=&quot;fnref:footnote&quot;&gt;&lt;a href=&quot;#fn:footnote&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;的样例。&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;定义型列表&lt;/h3&gt;

&lt;dl&gt;
  &lt;dt&gt;名词 1&lt;/dt&gt;
  &lt;dd&gt;定义 1（左侧有一个可见的冒号和四个不可见的空格）&lt;/dd&gt;
  &lt;dt&gt;代码块 2&lt;/dt&gt;
  &lt;dd&gt;这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;代码块（左侧有八个不可见的空格）
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;html&quot;&gt;HTML标签&lt;/h3&gt;
&lt;p&gt;支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th rowspan=&quot;2&quot;&amp;gt;值班人员&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期一&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期二&amp;lt;/th&amp;gt;
        &amp;lt;th&amp;gt;星期三&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;李强&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;张明&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;王平&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&quot;reference&quot;&gt;reference&lt;/h3&gt;
&lt;p&gt;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:footnote&quot;&gt;
      &lt;p&gt;这是一个 &lt;em&gt;注脚&lt;/em&gt; 的文本。 &lt;a href=&quot;#fnref:footnote&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 23 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2017/04/Markdown_Syntax/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2017/04/Markdown_Syntax/</guid>
        
        <category>markdown</category>
        
        
      </item>
    
      <item>
        <title>git更新fork的repository</title>
        <description>&lt;p&gt;Fork一个别人的repository，做了一些改动，想提交pull request的时候，发现原先别人的repository已经又有了一些更新了，这个时候想使得自己fork出的repository也得到这些更新，即和原repository同步，该怎么做呢？这个问题应该被问烂了，stackoverflow上也有解答，基本上是指向的GitHub上的官方文档。最主要的是这2篇：
https://help.github.com/articles/configuring-a-remote-for-a-fork/
https://help.github.com/articles/syncing-a-fork/
本文略作翻译，以中文解答这个问题。
——&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;查看当前配置&lt;/h3&gt;
&lt;p&gt;首先，检查一下当前的配置，看看当前有没有已经设置了上游，这要使用git remote -v 命令。如下：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$git remote -v  
origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)  
origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push) 
&lt;/code&gt; 
以上表明，origin这个repository对应的是远端的https开头的这个链接指向的repository，即自己fork出的repository。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;设置上游&lt;/h3&gt;
&lt;p&gt;第二步，将原repository设置为自己fork出的repository的上游（upstream）。运用如下的命令：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运用第一步中提到的git remove -v命令再次检查一下，结果如下：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$git remote -v  
origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)  
origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)  
upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)  
upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)  
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;获取上游更新&lt;/h3&gt;
&lt;p&gt;第三步，运行 git fetch upstream 命令，如下：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$git fetch upstream  
remote: Counting objects: 75, done.  
remote: Compressing objects: 100% (53/53), done.  
remote: Total 62 (delta 27), reused 44 (delta 9)  
Unpacking objects: 100% (62/62), done.  
From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY  
 * [new branch]      master     -&amp;gt; upstream/master
&lt;/code&gt;&lt;br /&gt;
以上表明，远程的原repository上确实有一些更新，现在它们已经被download到本地的.git文件夹下了，但是还没有合并到本地的代码中。&lt;/p&gt;

&lt;h3 id=&quot;checkoutrepo&quot;&gt;checkout本地repo&lt;/h3&gt;
&lt;p&gt;第四步，git checkout master，这是保证切换到本地的repository的master上，如果本来就在，那么这一步不是必须的。
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$git fetch upstream 
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;merge&quot;&gt;merge上游更新&lt;/h3&gt;
&lt;p&gt;第五步，运行 git merge upstream/master 命令，将upstream/master上的更新合并到本地的master上，其实就是将第三步中download到.git文件夹下的那些change合并到本地的master中。如下：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$git merge upstream/master  
Updating a422352..5fdff0f  
Fast-forward  
 README                    |    9 -------  
 README.md                 |    7 ++++++  
 2 files changed, 7 insertions(+), 9 deletions(-)  
 delete mode 100644 README  
 create mode 100644 README.md  
&lt;/code&gt;
如果本地没有什么自己独立的更新的话，那么将执行”fast-forward”的合并。如果本地有自己独立的更新，而又会引起冲突的话，则要解决冲突，再commit。&lt;/p&gt;

&lt;p&gt;关于解决冲突，如果明确所有冲突都是使用upstream/master上的来override自己的，那么可以直接运行如下命令，则无需解决冲突了：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git merge -X theirs upstream/master  
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;注意，以上步骤结束后，仅仅是本地的fork出的repository和原repository取得了同步，如果想让远程的fork出的repository也同样取得同步，必须再git push上去。&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;reference&lt;/h3&gt;
&lt;p&gt;http://blog.csdn.net/nirendao/article/details/51464191&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2017/04/git%E6%9B%B4%E6%96%B0fork%E7%9A%84repository/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2017/04/git%E6%9B%B4%E6%96%B0fork%E7%9A%84repository/</guid>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>Subline Text3编辑markdown文本</title>
        <description>&lt;p&gt;之前一直使用notepad++写SHELL、SQL，有一天想玩玩markdown的时候，觉得不是那么方便。于是，就有了subline的出现。&lt;/p&gt;

&lt;p&gt;使用subline编写markdown需要：
&amp;gt; 1. 安装subline
&amp;gt; 2. 安装markdown相关插件
» * Package Control：用于管理插件
» * MarkdownEditing：编辑markdown&lt;br /&gt;
» * Markdown Preview：预览markdown&lt;/p&gt;

&lt;h3 id=&quot;subline&quot;&gt;安装subline&lt;/h3&gt;
&lt;p&gt;Subline 官网下载并安装(http://www.sublimetext.com/3)&lt;/p&gt;

&lt;h3 id=&quot;package-control&quot;&gt;安装Package Control&lt;/h3&gt;
&lt;p&gt;Package Control官网(https://packagecontrol.io/installation)
#### 安装步骤：
&amp;gt; 1. 使用快捷键&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+~&lt;/code&gt; 或通过菜单栏 &lt;code class=&quot;highlighter-rouge&quot;&gt;View &amp;gt; Show Console&lt;/code&gt;调出console。
&amp;gt; 2. 复制官网Python code粘贴到console后按回车去执行。
» * subline text3选择SUBLINE TEXT3对应的代码
» &lt;code class=&quot;highlighter-rouge&quot;&gt;python
&amp;gt;&amp;gt; import urllib.request,os,hashlib; h = &#39;df21e130d211cfc94d9b0905775a7c0f&#39; + &#39;1e3d39e33b79698005270310898eea76&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)
&amp;gt;&amp;gt;&lt;/code&gt;
&amp;gt; &lt;img src=&quot;/images/posts/subline_text3/console.jpg&quot; alt=&quot;&quot; /&gt;
&amp;gt; 3. 重启subline后，可在&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences -&amp;gt; Package Settings&lt;/code&gt;看到&lt;code class=&quot;highlighter-rouge&quot;&gt;Package Control&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;markdowneditingmarkdown-preview&quot;&gt;安装MarkdownEditing与Markdown Preview&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;快捷方式&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Shift + p&lt;/code&gt;或通过菜单栏&lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences -&amp;gt; Package Control&lt;/code&gt;，输入install
 &lt;img src=&quot;/images/posts/subline_text3/install_package.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;安装MarkdownEditing 
 &lt;img src=&quot;/images/posts/subline_text3/install_MarkdownEditing.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;安装Markdown Preview
 &lt;img src=&quot;/images/posts/subline_text3/install_MarkdownPreview.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;偏好设置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;设置语言平台&lt;/strong&gt;
&amp;gt; 1. 打开Markdown Editing设置
&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences -&amp;gt; Package Settings -&amp;gt; Markdown Editing -&amp;gt; Markdown GFM Settings User&lt;/code&gt;
&amp;gt; 2. 增加配置
&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;
// These settings override both User and Default settings for the Markdown syntax  
{
    &quot;default_line_ending&quot;: &quot;unix&quot;,
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subline相关设置&lt;/strong&gt;
&amp;gt; 1. 打开settings&lt;br /&gt;
&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences -&amp;gt; Settings&lt;/code&gt;
&amp;gt; 2. 增加配置
&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;
&amp;gt; {
&amp;gt;     &quot;font_size&quot;: 12,
&amp;gt;     &quot;line_numbers&quot;: true,
&amp;gt; }  
&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自定义快捷键，预览markdown&lt;/strong&gt;
&amp;gt; 1. 打开Key Bindings
&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences -&amp;gt; Key Bindings&lt;/code&gt;&lt;br /&gt;
&amp;gt; 2. 增加配置
&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;
&amp;gt; {&quot;keys&quot;: [&quot;f6&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: { &quot;target&quot;: &quot;browser&quot;}}
&amp;gt;&lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;tips&lt;/em&gt;&lt;/strong&gt;
按F6就可以预览markdown文件啦。&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2017/04/Subline%E7%BC%96%E8%BE%91markdown%E6%96%87%E6%9C%AC/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2017/04/Subline%E7%BC%96%E8%BE%91markdown%E6%96%87%E6%9C%AC/</guid>
        
        <category>tools</category>
        
        <category>subline</category>
        
        <category>markdown</category>
        
        
      </item>
    
      <item>
        <title>Subline Text3注册序列号3126</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
—– BEGIN LICENSE —–
Michael Barnes
Single User License
EA7E-821385
8A353C41 872A0D5C DF9B2950 AFF6F667
C458EA6D 8EA3C286 98D1D650 131A97AB
AA919AEC EF20E143 B361B1E7 4C8B7F04
B085E65E 2F5F5360 8489D422 FB8FC1AA
93F6323C FD7F7544 3F39C318 D95E6480
FCCC7561 8A4A1741 68FA4223 ADCEDE07
200C25BE DBBC4855 C4CFB774 C5EC138C
0FEC1CEF D9DCECEC D3A5DAD1 01316C36
—— END LICENSE ——
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
—– BEGIN LICENSE —–
Free Communities Consultoria em Informática Ltda
Single User License
EA7E-801302
C154C122 4EFA4415 F1AAEBCC 315F3A7D
2580735A 7955AA57 850ABD88 72A1DDD8
8D2CE060 CF980C29 890D74F2 53131895
281E324E 98EA1FEF 7FF69A12 17CA7784
490862AF 833E133D FD22141D D8C89B94
4C10A4D2 24693D70 AE37C18F 72EF0BE5
1ED60704 651BC71F 16CA1B77 496A0B19
463EDFF9 6BEB1861 CA5BAD96 89D0118E
—— END LICENSE ——
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
—– BEGIN LICENSE —–
Nicolas Hennion
Single User License
EA7E-866075
8A01AA83 1D668D24 4484AEBC 3B04512C
827B0DE5 69E9B07A A39ACCC0 F95F5410
729D5639 4C37CECB B2522FB3 8D37FDC1
72899363 BBA441AC A5F47F08 6CD3B3FE
CEFB3783 B2E1BA96 71AAF7B4 AFB61B1D
0CC513E7 52FF2333 9F726D2C CDE53B4A
810C0D4F E1F419A3 CDA0832B 8440565A
35BF00F6 4CA9F869 ED10E245 469C233E
—— END LICENSE ——
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
—– BEGIN LICENSE —–
Anthony Sansone
Single User License
EA7E-878563
28B9A648 42B99D8A F2E3E9E0 16DE076E
E218B3DC F3606379 C33C1526 E8B58964
B2CB3F63 BDF901BE D31424D2 082891B5
F7058694 55FA46D8 EFC11878 0868F093
B17CAFE7 63A78881 86B78E38 0F146238
BAE22DBB D4EC71A1 0EC2E701 C7F9C648
5CF29CA3 1CB14285 19A46991 E9A98676
14FD4777 2D8A0AB6 A444EE0D CA009B54
—— END LICENSE ——
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
—– BEGIN LICENSE —–
Alexey Plutalov
Single User License
EA7E-860776
3DC19CC1 134CDF23 504DC871 2DE5CE55
585DC8A6 253BB0D9 637C87A2 D8D0BA85
AAE574AD BA7D6DA9 2B9773F2 324C5DEF
17830A4E FBCF9D1D 182406E9 F883EA87
E585BBA1 2538C270 E2E857C2 194283CA
7234FF9E D0392F93 1D16E021 F1914917
63909E12 203C0169 3F08FFC8 86D06EA8
73DDAEF0 AC559F30 A6A67947 B60104C6
—— END LICENSE ——
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2017/04/Subline_Text3_3126_Licenses/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2017/04/Subline_Text3_3126_Licenses/</guid>
        
        <category>tools</category>
        
        <category>subline</category>
        
        
      </item>
    
      <item>
        <title>数据库大小写敏感问题</title>
        <description>&lt;h3 id=&quot;oracle&quot;&gt;Oracle&lt;/h3&gt;
&lt;p&gt;默认大小写不敏感，表名、字段名等不区分大小写。小写字母会自动转换为大写字母，需要用小写字母时需要使用双引号，或借助函数upper()和lower()。&lt;/p&gt;

&lt;h3 id=&quot;sqlserver&quot;&gt;SQLServer&lt;/h3&gt;
&lt;p&gt;默认大小写不敏感。可以通过修改排序规则改变：右击数据库 -&amp;gt; 属性 -&amp;gt; 选项 -&amp;gt; 排序规则：Chinese_PRC_CS_AS（区分大小写）、Chinese_PRC_CI_AS（不区分大小写）。&lt;/p&gt;

&lt;h3 id=&quot;mysql&quot;&gt;MySQL&lt;/h3&gt;
&lt;p&gt;#### Windows&lt;br /&gt;
都不区分大小写。&lt;/p&gt;

&lt;h4 id=&quot;linux&quot;&gt;Linux&lt;/h4&gt;
&lt;p&gt;数据库名、表名、列名、别名大小写规则如下：&lt;br /&gt;
&amp;gt; 1. 数据库名与表名是严格区分大小写；&lt;br /&gt;
&amp;gt; 2. 表的别名是严格区分大小写；&lt;br /&gt;
&amp;gt; 3. 变量名也是严格区分大小写；
&amp;gt; 4. 列名与列的别名在所有的情况下均忽略大小写。&lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;解决办法：&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;关于库名、表名、表别名的大小写敏感问题&lt;/strong&gt;&lt;br /&gt;
可通过lower_case_table_names参数来控制数据库名、表名、表别名的大小写敏感。
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
mysql&amp;gt; show variables like &#39;lower%&#39;;
+------------------------+-------+
| Variable_name  | Value |
+------------------------+-------+
| lower_case_file_system | OFF   |
| lower_case_table_names | 1 |
+------------------------+-------+
2 rows in set (0.00 sec)
&lt;/code&gt;
tips:&lt;br /&gt;
lower_case_file_system是只读参数，无法被修改，这个参数是用来告诉你在当前的系统平台下，是否对文件名大小写敏感。&lt;/p&gt;

&lt;p&gt;notes:&lt;br /&gt;
&amp;gt; 1. 对于windows和Mac OX S 这些文件系统对大小写不敏感的系统该参数不能设置为0，并且在5.6.27以后如果在大小写不敏感的操作系统上设置该参数为0启动实例时会报错，并且退出。&lt;br /&gt;
&amp;gt; 2. linux系统值为0，windows默认设置为1，Mac OXS设置为2， lower_case_table_names=2 只能用于大小写不敏感的系统，在linux系统上设置lower_case_table_names=2，启动后errorlog中会有如下提示：&lt;br /&gt;
 [Warning] lower_case_table_names was set to 2,even though your the file system ‘/home/test/var/lib/data1/’ is casesensitive.  Now settinglower_case_table_names to 0 to avoid future problems.&lt;br /&gt;
&amp;gt; 3. 为了避免不同平台之间迁移数据库时遇到大小写问题，建议所有平台上都设置lower_case_table_names=1。&lt;br /&gt;
&amp;gt; 4. 在unix系统上，如果你准备把lower_case_table_names从0改成1，那么你的先把有大写的表名都改成小写(RENAME TABLE T1 TO t1;)，否则你访问之前有大写字母的表会报如下错误：desc sysNumLimit_0408; ERROR 1146 (42S02): Table ‘kopc.sysnumlimit_0408’doesn’t exist.&lt;br /&gt;
当然也可以在修改参数之前把库做导出，然后删除所有数据库(drop database)，然后修改参数，最后重新导入。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于字段值内容的大小写敏感问题&lt;/strong&gt;&lt;br /&gt;
字段值的大小写敏感性由MySQL的校对规则(collate)来控制。提到校对规则，就不得不说字符集。字符集是一套符号和编码，collate指定了字符集中数据的排序和比对规则则，比如定义’A’&amp;lt;’B’这样的关系的规则。每种字符集都会对应一定数据库的collate，一般而言，collate是以其相关的字符集名开始，通常包括一个语言名，并且以_ci（ci是case insensitive的缩写）、_cs（cs是case sensitive的缩写）或_bin（二元）结束 。比如 latin1字符集的collate有latin1_general_ci(这个是utf8字符集默认的校对规则)，latin1_general_cs，latin1_bin表示二进制比较(区分大小写)。可以通过show collation命令来查看字符集支持的校对规则有哪些。&lt;/p&gt;

&lt;p&gt;校对规则通过关键字collate指定，可以在数据库、表、列几个层面指定字符集和校对规，越往后优字符集和校对规则生效的优先级越高，如果没有为列或者表指定字符集和校对规则，那么它会继承上级的字符集和校对规则。比如创建数据库test1，指定字符集为utf8，校对规则为utf8_bin。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关测试如下：&lt;/strong&gt;&lt;br /&gt;
```bash
#1.创建字符集为utf8，校对规则为utf8_general_ci的数据库（MySQL5.6默认）
mysql&amp;gt; CREATE DATABASE test1;
Query OK, 1 row affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; use test1;
Database changed&lt;/p&gt;

&lt;h1 id=&quot;testcase&quot;&gt;2.1创建test_case表。因为没有为表和列指定字符集、校对规则，它们会继承所在数据库的字符集和校对规则&lt;/h1&gt;
&lt;p&gt;mysql&amp;gt; CREATE TABLE test_case(name varchar(20));
Query OK, 0 rows affected (0.77 sec)&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;2.2为列指定了字符集和校对规则(列优先级高于表，高于数据库)&lt;/h1&gt;
&lt;p&gt;mysql&amp;gt; CREATE TABLE test_case1(name varchar(20) character set utf8 collate utf8_bin);
Query OK, 0 rows affected (0.80 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SHOW CREATE TABLE test_case \G
&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;* 1. row **&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*****
   Table: test_case
Create Table: CREATE TABLE &lt;code class=&quot;highlighter-rouge&quot;&gt;test_case&lt;/code&gt; (
  &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; varchar(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SHOW CREATE TABLE test_case1 \G
&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;* 1. row **&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;&lt;strong&gt;**&lt;/strong&gt;*****
   Table: test_case1
Create Table: CREATE TABLE &lt;code class=&quot;highlighter-rouge&quot;&gt;test_case1&lt;/code&gt; (
  &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; varchar(20) CHARACTER SET utf8 COLLATE utf8_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8
1 row in set (0.00 sec)&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;3.插入测试数据&lt;/h1&gt;
&lt;p&gt;mysql&amp;gt; INSERT INTO test_case VALUES(‘abc’);
Query OK, 1 row affected (0.13 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; INSERT INTO test_case VALUES(‘ABC’);
Query OK, 1 row affected (0.13 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; INSERT INTO test_case1 VALUES(‘abc’);
Query OK, 1 row affected (0.27 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; INSERT INTO test_case1 VALUES(‘Abc’);
Query OK, 1 row affected (0.11 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case;
+——+
| name |
+——+
| abc  |
| ABC  |
+——+
2 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case1;
+——+
| name |
+——+
| abc  |
| Abc  |
+——+
2 rows in set (0.00 sec)&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;4.查询测试&lt;/h1&gt;
&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case WHERE name LIKE ‘ab%’;
+——+
| name |
+——+
| abc  |
| ABC  |
+——+
2 rows in set (0.00 sec)&lt;/p&gt;

&lt;h1 id=&quot;testcaseutf8generalcitestcase1nameutf8bin&quot;&gt;因为test_case使用的utf8_general_ci校对规则，所以大小写不敏感；test_case1的name列使用的是utf8_bin，所以大小写敏感。&lt;/h1&gt;
&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case1 WHERE name LIKE ‘ab%’;
+——+
| name |
+——+
| abc  |
+——+
1 row in set (0.00 sec)&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;5.添加主键测试&lt;/h1&gt;
&lt;p&gt;mysql&amp;gt; ALTER TABLE test_case ADD PRIMARY KEY (name);
ERROR 1062 (23000): Duplicate entry ‘ABC’ for key ‘PRIMARY’
mysql&amp;gt; ALTER TABLE test_case1 ADD PRIMARY KEY (name);
Query OK, 2 rows affected (2.06 sec)
Records: 2  Duplicates: 0  Warnings: 0
#test_case因为大小写不敏感，所以认为表中的abc和ABC两条记录是一样的，故添加主键时报错。
```&lt;/p&gt;

&lt;p&gt;NOTE:
1. 通过上面的测试，可以看到如果想某个字段值区分大小写，可以在建表时为该字段指定区别大小写的collate(_ci或者_bin)，对于已存在的表可以通过如下语句修改列的collate： 
&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL 
ALTER TABLE test_case MODIFY COLUMN NAME VARCHAR(20) CHARACTER SET UTF8 COLLATE UTF8_BIN;  
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果不想修改字段的collate，可以在查询的时候指定collate或者通过binary进行字段转换：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sql
SELECT * FROM test_case WHERE name LIKE &#39;ab%&#39; COLLATE UTF8_BIN;  
SELECT * FROM test_case WHERE BINARY name LIKE &#39;ab%&#39;;  
SELECT * FROM test_case WHERE name = BINARY &#39;abc&#39;;  
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;测试验证&lt;/strong&gt;&lt;br /&gt;
```bash
mysql&amp;gt; SELECT * FROM test_case WHERE name LIKE ‘ab%’;
+——+
| name |
+——+
| abc  |
| ABC  |
+——+
2 rows in set (0.00 sec)
#没有指定collate，默认使用name列的collate(utf8_general_ci)，所以查询不区分大小写&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case WHERE name LIKE ‘ab%’ COLLATE UTF8_BIN;
+——+
| name |
+——+
| abc  |
+——+
1 row in set (0.00 sec)
#查询时指定collate为utf8_bin，所以查询区分大小写&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case WHERE BINARY name LIKE ‘ab%’;
+——+
| name |
+——+
| abc  |
+——+
1 row in set (0.00 sec)
#通过使用binary关键字将字符串转换成二进制进行比较，这样也能够区分大小写。(实验发现对name列使用binary依然可以使用name列上的索引)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case1 WHERE name LIKE ‘ab%’;
+——+
| name |
+——+
| abc  |
+——+
1 row in set (0.00 sec)
#没有指定collate，查询默认使用name列的collate(utf8_bin)，所以查询区分大小写&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case1 WHERE name LIKE ‘ab%’ COLLATE UTF8_GENERAL_CI;
+——+
| name |
+——+
| Abc  |
| abc  |
+——+
2 rows in set (0.00 sec)
#查询指定collate为utf8_general_ci，所以查询区分大小写&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case WHERE name LIKE ‘ab%’;
+——+
| name |
+——+
| abc  |
| ABC  |
+——+
2 rows in set (0.00 sec)
#没有指定区别大小写的collate也没有指定binary，所以查询是不区分大小写的&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; SELECT * FROM test_case WHERE name LIKE BINARY ‘ab%’;
+——+
| name |
+——+
| abc  |
+——+
1 row in set (0.00 sec)
#使用binary 将’abc’字符串转换成二进制进行比较&lt;br /&gt;
```&lt;/p&gt;

&lt;h4 id=&quot;reference&quot;&gt;reference:&lt;/h4&gt;
&lt;p&gt;http://www.voidcn.com/blog/shaochenshuo/article/p-6229106.html&lt;br /&gt;
https://bbs.aliyun.com/read/243931.html&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jan 2017 14:08:05 +0800</pubDate>
        <link>https://wowkingah.github.io/2017/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2017/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%E9%97%AE%E9%A2%98/</guid>
        
        <category>databases</category>
        
        <category>mysql</category>
        
        <category>oracle</category>
        
        <category>mssql</category>
        
        
      </item>
    
      <item>
        <title>Linux下使用github</title>
        <description>&lt;h3 id=&quot;github&quot;&gt;1. GITHUB环境准备&lt;/h3&gt;

&lt;h4 id=&quot;githubhttpsgithubcom&quot;&gt;1.1 申请GITHUB账号：https://github.com/&lt;/h4&gt;

&lt;h4 id=&quot;key&quot;&gt;1.2 生成KEY&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
[wowking@ZTEST-218 git]$ ssh-keygen -t rsa -C &quot;wowkingah@gmail.com&quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/home/wowking/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/wowking/.ssh/id_rsa.
Your public key has been saved in /home/wowking/.ssh/id_rsa.pub.
The key fingerprint is:
e5:1f:b6:cc:09:e0:bd:2a:d2:bb:1d:36:b4:a8:33:70 wowkingah@gmail.com
The key&#39;s randomart image is:
+--[ RSA 2048]----+
| |
| |
| . . |
| . = |
| S + o |
| . E o . B + |
| o .. = . * |
| +.oo + |
| .+o+o |
+-----------------+
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;key-1&quot;&gt;1.3 查看生成的KEY&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
[wowking@ZTEST-218 git]$ ls ~/.ssh/
id_rsa id_rsa.pub known_hosts
[wowking@ZTEST-218 git]$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA2nkR/J0WOSrV5g1/JseP+e0Wv+VejDs+Qk1wXpbyWQd5W1QD4nJYlYaM58vpUMhooW+iC4ciA4PGwxMEwc+wXLs0JZAgKVuXW8moJCsnXfMxo0eUX1l0wWeuVgSo46tb/U+0bsQNmMhNj4UQgflDABHGWGdZqg/8nV5kGr0VDpmwPvo7gbdm+56rQDRPyldSo+sbDvS78zzidpJi+OmG4wpA7emvrQYC2T9YaJIgzNjG6Gvpbe0BG3it0/n5cIXy5PW56jhdsb1KO4A9fLNximb0y7FJluhcaoxvCGFP1OnBo4IfdiRIoEzYCS8xzRz6h7WxgQGZFjxbB3WITNpkwQ== wowkingah@gmail.com
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;idrsapubgithub&quot;&gt;1.4 将公钥id_rsa.pub添加至github&lt;/h4&gt;
&lt;p&gt;github =&amp;gt; settings =&amp;gt; SSH and GPG keys =&amp;gt; New SSH key =&amp;gt; Add SSH key&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;1.5 测试&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
[wowking@ZTEST-218 git]$ ssh -T git@github.com
The authenticity of host &#39;github.com (192.30.253.113)&#39; can&#39;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;github.com,192.30.253.113&#39; (RSA) to the list of known hosts.
Hi wowkingah! You&#39;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;git&quot;&gt;2. 常用GIT命令&lt;/h3&gt;
&lt;p&gt;#### 2.1 clone
&lt;code class=&quot;highlighter-rouge&quot;&gt;
[wowking@ZTEST-218 git]$ git clone git@github.com:wowkingah/test.git
Initialized empty Git repository in /home/wowking/git/test/.git/
warning: You appear to have cloned an empty repository.
[wowking@ZTEST-218 git]$ cd test
[wowking@ZTEST-218 test]$ echo &quot;# test1&quot; &amp;gt; README.md
[wowking@ZTEST-218 test]$ ll
total 4
-rw-rw-r-- 1 wowking wowking 8 Dec 26 16:35 README.md
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;add&quot;&gt;2.2 add&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
[wowking@ZTEST-218 test]$ git add README.md
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;commit&quot;&gt;2.3 commit&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
[wowking@ZTEST-218 test]$ git commit -m &quot;first commit&quot;
[master (root-commit) a72396a] first commit
1 files changed, 1 insertions(+), 0 deletions(-)
create mode 100644 README.md
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;push&quot;&gt;2.4 push&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
[wowking@ZTEST-218 test]$ git push -u origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 217 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:wowkingah/test.git
* [new branch] master -&amp;gt; master
Branch master set up to track remote branch master from origin.
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2016/12/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8github/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2016/12/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8github/</guid>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>My first blog for Jekyll~</title>
        <description>&lt;p&gt;Welcome ~&lt;br /&gt;
    This is my first blog for Jekyll.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2016/12/my_first_blog/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2016/12/my_first_blog/</guid>
        
        <category>personal</category>
        
        
      </item>
    
      <item>
        <title>SHELL实现多线程并发</title>
        <description>&lt;p&gt;SHELL本身是按顺序执行，并没有并发概念，但可以通过几种常见方式来模拟实现多线程并发。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;原始脚本&lt;/h3&gt;
&lt;p&gt;```bash
[root@ZTEST-218 ~]# cat task.sh
#!/bin/bash&lt;/p&gt;

&lt;p&gt;START_TIME=&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;for ((I=1;I&amp;lt;=10;I++))   #模拟10个任务
do
    echo “${I}: success” ; sleep 2
done&lt;/p&gt;

&lt;p&gt;STOP_TIME=&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%s&lt;/code&gt;
echo “TIME: $(expr ${STOP_TIME} - ${START_TIME})”&lt;/p&gt;

&lt;p&gt;[root@ZTEST-218 ~]# sh task.s
1: success
2: success
3: success
4: success
5: success
6: success
7: success
8: success
9: success
10: success
TIME: 20
```
&amp;gt; tips:
&amp;gt; 顺序执行需要20s.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;方式一：后台执行&lt;/h3&gt;
&lt;p&gt;```bash
[root@ZTEST-218 ~]# cat d_task.sh
#!/bin/bash&lt;/p&gt;

&lt;p&gt;START_TIME=&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;for ((I=1;I&amp;lt;=10;I++))
do
    {
        echo “${I}: success” ; sleep 2
    }&amp;amp;
done
wait&lt;/p&gt;

&lt;p&gt;STOP_TIME=&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%s&lt;/code&gt;
echo “TIME: $(expr ${STOP_TIME} - ${START_TIME})”&lt;/p&gt;

&lt;p&gt;[root@ZTEST-218 ~]# sh d_task.sh
7: success
9: success
3: success
10: success
5: success
6: success
1: success
2: success
4: success
8: success
TIME: 2
```
&amp;gt; &lt;strong&gt;&lt;em&gt;tips:&lt;/em&gt;&lt;/strong&gt;
&amp;gt; 本次执行时间为2s.
&amp;gt; 使用“{}”将执行程序变为一个块，然后用“&amp;amp;”将放入后台。10次执行全部放入后台后，需要用wait来等待所有后台进程执行结束，否则操作系统不会等待，而直接继续执行后续指令，直到整个程序结束。
&amp;gt; 缺陷：该方法不能控制运行在后台的进程数，任务较多时会拖垮操作系统。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;方式二：管道+文件描述符&lt;/h3&gt;
&lt;p&gt;```bash
[root@ZTEST-218 ~]# cat p_task.sh
#!/bin/bash
THREAD_NUM=5
TMP_FILE=”/tmp/$$.fifo”&lt;/p&gt;

&lt;p&gt;trap “exec 6&amp;gt;&amp;amp;-;exec 6&amp;lt;&amp;amp;-;exit 0” 2     #脚本运行过程中，如果接收到信号2(Ctrl+C)中断命令，则关闭文件描述符6的读写，并正常退出&lt;/p&gt;

&lt;p&gt;mkfifo ${TMP_FILE}  #创建有名管道
exec 6&amp;lt;&amp;gt;${TMP_FILE} #创建文件描述符，文件描述符可使用3-(n-1)，n取值范围：ulimit -n。以读写(&amp;lt;,读；&amp;gt;,写)方式绑定TMP_FILE管道文件。标识对文件描述符6的所有操作等同于对管道文件TMP_FILE的操作
rm -rf ${TMP_FILE}  #为什么不直接使用管道文件？因为管道的一个重要特性：读写必须同时存在，缺失某个操作，另一个操作就会滞留。绑定文件描述符（读、写绑定）正好解决了这个问题&lt;/p&gt;

&lt;p&gt;for ((J=1;J&amp;lt;=${THREAD_NUM};J++)) #向管道中中输入THREAD_NUM个并发数量的空行。为什么写入空行而不是字符？那是因为管道文件的读取是以行为单位。
do
    echo &amp;gt;&amp;amp;6
done&lt;/p&gt;

&lt;p&gt;START_TIME=&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;for ((I=1;I&amp;lt;=10;I++))
do 
    read -u6 #从管道中读取行，每次读一行。每读一次就会减少一个空行，直到管道中没有回车符，所有行读取完毕后执行挂起，实现线程数量控制。
    {
        echo “${I}: success” ; sleep 2
        echo &amp;gt;&amp;amp;6    #任务在后台执行结束后，向文件描述符中写入一个空行。如果不在向描述符中写入空行，当后台放入THREAD_NUM个任务之后，由于描述符中没有可读取的空行，会导致read -u6停顿。
    }&amp;amp;
done
wait&lt;/p&gt;

&lt;p&gt;STOP_TIME=&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%s&lt;/code&gt;
echo “TIME: $(expr ${STOP_TIME} - ${START_TIME})”&lt;/p&gt;

&lt;p&gt;exec 6&amp;gt;&amp;amp;-
exec 6&amp;lt;&amp;amp;-&lt;/p&gt;

&lt;p&gt;[root@ZTEST-218 ~]# sh p_task.sh
1: success
2: success
3: success
5: success
4: success
6: success
7: success
9: success
8: success
10: success
TIME: 4
```
&amp;gt; &lt;strong&gt;&lt;em&gt;tips:&lt;/em&gt;&lt;/strong&gt;
&amp;gt; 本次执行时间为4s.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;reference&lt;/h3&gt;
&lt;p&gt;http://www.jianshu.com/p/2d60e6513fdd
http://www.cnblogs.com/yxzfscg/p/5330136.html&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2016/12/SHELL%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2016/12/SHELL%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/</guid>
        
        <category>SHELL</category>
        
        
      </item>
    
      <item>
        <title>MySQL版本升级</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;小版本升级&lt;/h3&gt;
&lt;p&gt;从MySQL 5.6.1升级到MySQL5.6.x，升级未跨越5.6.x称为小版本升级。&lt;/p&gt;

&lt;h3 id=&quot;yum&quot;&gt;YUM升级&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;不可少的备份；&lt;/li&gt;
    &lt;li&gt;查看YUM可升级的目标版本：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash 
 [root@ZTEST-206 ~]# yum list mysql-community-server
 Installed Packages
 mysql-community-server.x86_64 5.6.28-2.el6 @mysql56-community
 Available Packages
 mysql-community-server.x86_64 5.6.34-2.el6 mysql56-community
&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;升级： 
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash 
 [root@ZTEST-206 ~]# yum update mysql-community-server
&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;执行mysql_upgrade检查：
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
 [root@ZTEST-206 ~]# mysql_upgrade -uroot -p123456
&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;查看升级后版本：&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash 
 mysql&amp;gt; select @@version;  
 +------------+  
 | @@version |  
 +------------+  
 | 5.6.34-log |   
 +------------+  
 1 row in set (0.00 sec)    
&lt;/code&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tips&quot;&gt;tips:&lt;/h3&gt;
&lt;p&gt;如果数据库是主从环境，遵循先升级从库，再升级主备原则；&lt;br /&gt;
一般YUM更新后会重启MySQL。&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;reference:&lt;/h3&gt;
&lt;p&gt;http://dev.mysql.com/doc/refman/5.6/en/updating-yum-repo.html&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2016/12/MySQL%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2016/12/MySQL%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
      <item>
        <title>MySQL大表快速导入导出</title>
        <description>&lt;p&gt;MySQL大表快速导出常用两种方式：
&amp;gt; * mysqldump
&amp;gt; * INTO OUTFILE&lt;/p&gt;

&lt;h3 id=&quot;mysqldump&quot;&gt;mysqldump&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
[root@db_node01 ~]# mysqldump --opt -uxxx -pxxx test t1 &amp;gt; /tmp/t1.sql
&lt;/code&gt;
&lt;strong&gt;&lt;em&gt;tips&lt;/em&gt;&lt;/strong&gt;
&amp;gt; 适合整库或整表导出。&lt;br /&gt;
&amp;gt; –opt：默认包含–add-drop-table –add-locks –create-options –disable-keys –extended-insert –lock-tables –quick –set-charset&lt;/p&gt;

&lt;h3 id=&quot;into-outfile&quot;&gt;INTO OUTFILE&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
mysql&amp;gt;  SELECT xxx FROM t1 WHERE xx INTO OUTFILE &#39;/tmp/t1.sql&#39;;
&lt;/code&gt;
&lt;strong&gt;&lt;em&gt;tips&lt;/em&gt;&lt;/strong&gt;
&amp;gt; 适合按指定条件导出表。 
&amp;gt; 可以通过FIELDS TERMINATED BY ‘字符串’ 来指定字段之间的分隔符，可以为单个或多个字符。默认为’\t’。&lt;br /&gt;
&amp;gt; 可以通过FIELDS ENCLOSED BY ‘字符’ 来指定括住字段的值，只能为单个字符。默认情况下不使用任何符号，即当表中值为 TEST 时，导出后为 字符TEST符。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;根据以上导出方式，有两种快速导入方式：&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;SOURCE&lt;/li&gt;
    &lt;li&gt;LOAD DATA INFILE&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;source&quot;&gt;SOURCE&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
mysql&amp;gt; use db_name; source /tmp/t1.sql;
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;load-data-infile&quot;&gt;LOAD DATA INFILE&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
mysql&amp;gt; use db_name; LOAD DATA INFILE &#39;/tmp/t1.sql&#39; INTO TABLE t1;
&lt;/code&gt;
&lt;strong&gt;&lt;em&gt;tips&lt;/em&gt;&lt;/strong&gt;
&amp;gt; 如果SELECT … INTO OUTFILE时有指定FIELDS TERMINATED等参数，这里也需要指定。&lt;/p&gt;

&lt;p&gt;对于其它方式导入大表数据，可根据表ENGINE类型加以下参数：
### MyISAM
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
mysql&amp;gt; ALTER TABLE t_name DISABLE KEYS;
mysql&amp;gt; LOADING THE DATA ALTER TABLE t_name ENABLE KEYS;
&lt;/code&gt;
&lt;strong&gt;&lt;em&gt;tips&lt;/em&gt;&lt;/strong&gt;
&amp;gt; 这两个命令用来打开或者关闭Myisam表非唯一索引的更新。对于导入大量数据到一个空MyISAM表，默认就是先导入数据然后才创建索引的，故不用进行设置。&lt;/p&gt;

&lt;h3 id=&quot;innodb&quot;&gt;InnoDB&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
mysql&amp;gt; SET UNIQUE_CHECKS=0;
mysql&amp;gt; SET AUTOCOMMIT=0;
&lt;/code&gt;
&lt;strong&gt;&lt;em&gt;tips&lt;/em&gt;&lt;/strong&gt;
&amp;gt; 一个关闭唯一性校验，一个关闭自动提交。数据导完后，得改回来。&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://wowkingah.github.io/2016/11/MySQL%E5%A4%A7%E8%A1%A8%E5%BF%AB%E9%80%9F%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</link>
        <guid isPermaLink="true">https://wowkingah.github.io/2016/11/MySQL%E5%A4%A7%E8%A1%A8%E5%BF%AB%E9%80%9F%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/</guid>
        
        <category>MySQL</category>
        
        
      </item>
    
  </channel>
</rss>
